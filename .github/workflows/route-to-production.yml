# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Route To Production

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  build-bicep:
    environment: ACR

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Build Bicep
      run: az bicep build --file bicep/main.bicep --stdout

  build-dotnet:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Set up dependency caching for faster builds
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal --filter FullyQualifiedName!~IntegrationTests

    - name: dotnet publish servers-integration-webapi
      run: dotnet publish servers-integration-webapi/servers-integration-webapi.csproj --configuration Release --output ${{env.DOTNET_ROOT}}/servers-integration-webapi/servers-integration-webapi.zip

    - name: Upload artifact servers-integration-webapi
      uses: actions/upload-artifact@v3
      with:
        name: servers-integration-webapi
        path: ${{env.DOTNET_ROOT}}/servers-integration-webapi

  validate-bicep-dev:
    runs-on: ubuntu-latest
    environment: Development
    needs: ["build-bicep"]

    steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Validate Bicep
      run: |
        if ((az group exists --name 'rg-portal-servers-integration-dev-uksouth') -eq $true) { 
          az deployment group validate `
            --name 'portal-servers-integration-dev' `
            --resource-group 'rg-portal-servers-integration-dev-uksouth' `
            --template-file bicep/main.bicep `
            --parameters @bicep/dev.params.json `
              parServersApiAppId=00000000-0000-0000-0000-000000000000
        }

  deploy-bicep-dev:
    runs-on: ubuntu-latest
    environment: Development
    needs: ["validate-bicep-dev", "build-dotnet"]
    
#env:
#  AZURE_WEBAPP_NAME: your-app-name    # set this to the name of your Azure Web App
#  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
#  DOTNET_VERSION: '5'                 # set this to the .NET Core version to use
#
#on:
#  push:
#    branches: [ "main" ]
#  workflow_dispatch:
#
#permissions:
#  contents: read
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up .NET Core
#        uses: actions/setup-dotnet@v2
#        with:
#          dotnet-version: ${{ env.DOTNET_VERSION }}
#
#      - name: Set up dependency caching for faster builds
#        uses: actions/cache@v3
#        with:
#          path: ~/.nuget/packages
#          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-nuget-
#      - name: Build with dotnet
#        run: dotnet build --configuration Release
#
#      - name: dotnet publish
#        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp
#
#      - name: Upload artifact for deployment job
#        uses: actions/upload-artifact@v3
#        with:
#          name: .net-app
#          path: ${{env.DOTNET_ROOT}}/myapp
#
#  deploy:
#    permissions:
#      contents: none
#    runs-on: ubuntu-latest
#    needs: build
#    environment:
#      name: 'Development'
#      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
#
#    steps:
#      - name: Download artifact from build job
#        uses: actions/download-artifact@v3
#        with:
#          name: .net-app
#
#      - name: Deploy to Azure Web App
#        id: deploy-to-webapp
#        uses: azure/webapps-deploy@v2
#        with:
#          app-name: ${{ env.AZURE_WEBAPP_NAME }}
#          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
#          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}