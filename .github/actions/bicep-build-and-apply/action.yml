name: "bicep-build-and-apply"
  
inputs:
  environment:
    description: "The name of the environment e.g. dev, prd"
    required: true
  AZURE_CLIENT_ID: 
    description: "The azure client/application ID configured for federated access"
    required: true
    type: string
  AZURE_TENANT_ID: 
    description: "The target Azure tenant"
    required: true
    type: string
  AZURE_SUBSCRIPTION_ID: 
    description: "The target Azure subscription"
    required: true
    type: string
  
runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v3

    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
    
    - name: Build Bicep
      shell: bash
      run: |
        az bicep build --file bicep/platform.bicep --stdout
        az bicep build --file bicep/workload.bicep --stdout

    - name: Validate Bicep
      shell: pwsh
      run: |
        az deployment sub validate `
          --name 'portal-servers-integration-platform-${{ inputs.environment }}' `
          --location 'uksouth' `
          --template-file bicep/platform.bicep `
          --parameters @bicep/params/${{ inputs.environment }}.platform.params.json

        if ((az group exists --name 'rg-portal-servers-integration-${{ inputs.environment }}-uksouth') -eq $true) {
          az deployment group validate `
            --name 'portal-servers-integration-workload-${{ inputs.environment }}' `
            --resource-group 'rg-portal-servers-integration-${{ inputs.environment }}-uksouth' `
            --template-file bicep/workload.bicep `
            --parameters @bicep/params/${{ inputs.environment }}.workload.params.json `
              parServersIntegrationApiAppId=00000000-0000-0000-0000-000000000000
        }

    - name: WhatIf Bicep
      shell: pwsh
      run: |
        az deployment sub what-if `
          --name 'portal-servers-integration-${{ inputs.environment }}' `
          --location 'uksouth' `
          --template-file bicep/platform.bicep `
          --parameters @bicep/params/${{ inputs.environment }}.platform.params.json

        if ((az group exists --name 'rg-portal-servers-integration-${{ inputs.environment }}-uksouth') -eq $true) {
          az deployment group what-if `
            --name 'portal-servers-integration-workload-${{ inputs.environment }}' `
            --resource-group 'rg-portal-servers-integration-${{ inputs.environment }}-uksouth' `
            --template-file bicep/workload.bicep `
            --parameters @bicep/params/${{ inputs.environment }}.workload.params.json `
              parServersIntegrationApiAppId=00000000-0000-0000-0000-000000000000
        }

    - name: Deploy Platform Bicep
      shell: pwsh
      run: |
        $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
        $isDeleted = $deletedKeyVaults | where {$_ -match "rg-portal-servers-integration-${{ inputs.environment }}-uksouth"}

        $keyVaultCreateMode = "default"
        if ($isDeleted -ne $null) {
          # To allow the development environment to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
          $keyVaultCreateMode = "recover"
        }

        az deployment sub create `
          --name 'portal-servers-integration-platform-${{ inputs.environment }}' `
          --location 'uksouth' `
          --template-file bicep/platform.bicep `
          --parameters @bicep/params/${{ inputs.environment }}.platform.params.json `
          parKeyVaultCreateMode=$keyVaultCreateMode

    - name: Platform AAD Scripts
      shell: pwsh
      run: |
        $keyVaultName = az deployment sub show --name portal-servers-integration-platform-${{ inputs.environment }} --subscription ${{ inputs.AZURE_SUBSCRIPTION_ID }} --query properties.outputs.keyVaultName.value

        . scripts/SetDeployPrincipalPermissions.ps1 "$keyVaultName" "${{ inputs.AZURE_CLIENT_ID }}"
        . scripts/CreateAppRegistrations.ps1 "${{ inputs.environment }}" "uksouth"
        . scripts/CreateAppRegistrationsCredentials.ps1 "${{ inputs.environment }}" "uksouth" "$keyVaultName"

    - name: Deploy Workload Bicep
      shell: pwsh
      run: |
        $serversIntegrationApiAppId = (az ad app list --filter "displayName eq 'portal-servers-integration-${{ inputs.environment }}'" --query '[].appId') | ConvertFrom-Json

        az deployment group create --resource-group "rg-portal-servers-integration-${{ inputs.environment }}-uksouth" `
          --name 'portal-servers-integration-workload-${{ inputs.environment }}' `
          --template-file bicep/workload.bicep `
          --parameters @bicep/params/${{ inputs.environment }}.workload.params.json `
          parServersIntegrationApiAppId=$serversIntegrationApiAppId 

    - name: Workload AAD Scripts
      shell: pwsh
      run: |
        $deploymentOutput = (az deployment group show --name portal-servers-integration-workload-${{ inputs.environment }} --resource-group rg-portal-servers-integration-${{ inputs.environment }}-uksouth) | ConvertFrom-Json
        
        $repositoryApiName = "portal-repository-${{ inputs.environment }}"
        $repositoryApiId = (az ad app list --filter "displayName eq '$repositoryApiName'" --query '[].appId') | ConvertFrom-Json
        $resourceId = (az ad sp list --filter "appId eq '$repositoryApiId'" --query '[0].id') | ConvertFrom-Json
        $repositoryApiSpn = (az rest -m GET -u https://graph.microsoft.com/v1.0/servicePrincipals/$resourceId) | ConvertFrom-Json
        $appRoleId = ($repositoryApiSpn.appRoles | Where-Object { $_.displayName -eq "ServiceAccount" }).id

        $principalId = $deploymentOutput.properties.outputs.principalId.value
        . "scripts/functions/GrantPrincipalAppRole.ps1" -principalId $principalId -resourceId $resourceId -appRoleId $appRoleId

